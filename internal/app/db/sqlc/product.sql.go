// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO "products" (
	title,
	active,
	price,
	description
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, active, price, description, created_at, updated_at
`

type CreateProductParams struct {
	Title       string          `json:"title"`
	Active      sql.NullBool    `json:"active"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Title,
		arg.Active,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Active,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, id)
	err := row.Scan(&id)
	return id, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, title, active, price, description, created_at, updated_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Active,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const importProducts = `-- name: ImportProducts :exec
INSERT INTO products(
    id,
	title,
	active,
	price,
	description,
	created_at,
	updated_at
) VALUES(
    $1,$2,$3,$4,$5,$6,$7
)
`

type ImportProductsParams struct {
	ID          int64           `json:"id"`
	Title       string          `json:"title"`
	Active      sql.NullBool    `json:"active"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

func (q *Queries) ImportProducts(ctx context.Context, arg ImportProductsParams) error {
	_, err := q.db.ExecContext(ctx, importProducts,
		arg.ID,
		arg.Title,
		arg.Active,
		arg.Price,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const listProducts = `-- name: ListProducts :many
SELECT id, title, active, price, description, created_at, updated_at FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Active,
			&i.Price,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
	title = $2,
	active = $3,
	price = $4,
	description = $5,
	updated_at = $6
WHERE id = $1
RETURNING id, title, active, price, description, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int64           `json:"id"`
	Title       string          `json:"title"`
	Active      sql.NullBool    `json:"active"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Title,
		arg.Active,
		arg.Price,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
