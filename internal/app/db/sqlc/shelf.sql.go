// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shelf.sql

package db

import (
	"context"
)

const createShelf = `-- name: CreateShelf :one
INSERT INTO Shelves (shelf_name) VALUES ($1)RETURNING shelf_id
`

func (q *Queries) CreateShelf(ctx context.Context, shelfName string) (int32, error) {
	row := q.db.QueryRowContext(ctx, createShelf, shelfName)
	var shelf_id int32
	err := row.Scan(&shelf_id)
	return shelf_id, err
}

const deleteShelf = `-- name: DeleteShelf :one
DELETE FROM Shelves WHERE shelf_id = $1
RETURNING shelf_id
`

func (q *Queries) DeleteShelf(ctx context.Context, shelfID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, deleteShelf, shelfID)
	var shelf_id int32
	err := row.Scan(&shelf_id)
	return shelf_id, err
}

const getShelfByID = `-- name: GetShelfByID :one
SELECT shelf_id, shelf_name FROM Shelves WHERE shelf_id = 1
`

func (q *Queries) GetShelfByID(ctx context.Context) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getShelfByID)
	var i Shelf
	err := row.Scan(&i.ShelfID, &i.ShelfName)
	return i, err
}

const getShelfByName = `-- name: GetShelfByName :one
SELECT shelf_id, shelf_name FROM Shelves WHERE shelf_name = $1
`

func (q *Queries) GetShelfByName(ctx context.Context, shelfName string) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getShelfByName, shelfName)
	var i Shelf
	err := row.Scan(&i.ShelfID, &i.ShelfName)
	return i, err
}

const getShelfs = `-- name: GetShelfs :many
SELECT shelf_id, shelf_name FROM Shelves
`

func (q *Queries) GetShelfs(ctx context.Context) ([]Shelf, error) {
	rows, err := q.db.QueryContext(ctx, getShelfs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shelf
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(&i.ShelfID, &i.ShelfName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShelf = `-- name: UpdateShelf :exec
UPDATE Shelves
SET shelf_name = $2
WHERE shelf_id = $1
RETURNING shelf_id, shelf_name
`

type UpdateShelfParams struct {
	ShelfID   int32  `json:"shelf_id"`
	ShelfName string `json:"shelf_name"`
}

func (q *Queries) UpdateShelf(ctx context.Context, arg UpdateShelfParams) error {
	_, err := q.db.ExecContext(ctx, updateShelf, arg.ShelfID, arg.ShelfName)
	return err
}
